#!sh
# Vim script command line interpreter for MSDOS
# Language:    vim script
# Maintainer:  Dave Silvia <dsilvia@mchsi.com>
# Date:        8/27/2004
#
# Version 1.1
#   Added:
#     -  Command line arguments
#
#
# To use, place vimsh in a directory in your path, e.g.:
#     /usr/local/bin/vimsh
# NOTE: it is not necessary to have the .vimsh extension for execution
#       only for easy identification purposes (like .sh)
#
SCRIPT=$1 ; export SCRIPT
shift
SCRIPTARGV=$@ ; export SCRIPTARGV
# start in 'ex' mode, 'readonly', 'noswapfile'
vim -eRn -c "silent /^function SetUp/,/^endfunction/yank z | silent @z | call SetUp() | :q" $0
exit 0

The following functions parse a '.vimsh' script file of the form:

  #!/usr/local/bin/vimsh
	<Vim script code>
	.
	.
	.
	<Vim script code>

It executes the code, capturing the output for Vim internals, and then
echoes the output to the shell.

NOTE: ':!' shell escape commands can be used providing they are not imbedded
      in Vim script constructs such as loops, functions, etc.  This breaks
			the code flow and causes vimsh to hang.

NOTE: DO NOT PLACE ANY CODE/COMMENTS/ETC. AFTER HERE!
function SetUp()
	silent /^function Interpret/,$yank z
	silent @z
	bw
	execute 'silent DoArgs '.$SCRIPTARGV
	execute 'silent ex '.$SCRIPT
	set noswapfile nomore readonly
	call Interpret()
endfunction

function Interpret()
	let @a=''
	silent 2,$yank z
	let colonBangPos=match(@z,':!')
	while colonBangPos != -1
		let idx=colonBangPos
		while @z[idx] != "\<NL>" && idx > 0
			let idx=idx-1
		endwhile
		let @e=strpart(@z,0,idx)
		let @z=strpart(@z,idx+1)
		if @e != ''
			let @e="function! ATe()\<NL>".@e."\<NL>endfunction\<NL>"
			silent @e
			redir @A
			call ATe()
			redir END
		endif
		let newlinePos=match(@z,"\<NL>")
		if newlinePos != -1
			let @e=strpart(@z,0,newlinePos)
			let @z=strpart(@z,newlinePos+1)
		else
			let @e=@z
			let @z=''
		endif
		silent @e
		let colonBangPos=match(@z,':!')
	endwhile
	if @z != ''
		let @z="function! ATz()\<NL>".@z."\<NL>endfunction\<NL>"
		silent @z
		redir @A
		call ATz()
		redir END
	endif
	bw!
	if exists("g:Ret")
		let @a=g:Ret
	endif
	call delete(glob("~/.vimsh.out"))
	silent ex +set\ noswapfile ~/.vimsh.out
	silent put a
	silent :w!
	silent bw!
	execute 'silent :!cat '.glob("~/.vimsh.out")
endfunction

command -nargs=* DoArgs call DoArgs(<f-args>)
function DoArgs(...)
	let g:0=a:0
	let thisArgNo=1
	while thisArgNo <= a:0
		let g:{thisArgNo}=a:{thisArgNo}
		let thisArgNo=thisArgNo+1
	endwhile
endfunction
